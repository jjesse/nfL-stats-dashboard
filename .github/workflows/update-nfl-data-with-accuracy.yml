name: NFL Stats Data Update with Accuracy Tracking

on:
  schedule:
    # Run every 6 hours during NFL season
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      force_accuracy_update:
        description: 'Force accuracy recalculation'
        required: false
        default: 'false'

jobs:
  update-nfl-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create Required Directories
        run: |
          mkdir -p docs
          mkdir -p archive
          mkdir -p src/analysis
          echo "📁 Directories created"
      
      - name: Run Player Stats
        run: |
          echo "👤 Generating player statistics..."
          python src/data-processors/player-stats.py
          echo "✅ Player stats complete"
      
      - name: Run Team Stats
        run: |
          echo "🏈 Generating team statistics..."
          python src/data-processors/team-stats-basic.py
          echo "✅ Team stats complete"
      
      - name: Run Team Charts
        run: |
          echo "📊 Generating team charts..."
          python src/charts/team-charts.py
          echo "✅ Team charts complete"
      
      - name: Run Weekly Trends
        run: |
          echo "📈 Generating weekly trends..."
          python src/data-processors/team-weekly-trends.py
          echo "✅ Weekly trends complete"
      
      - name: Run Awards Predictions
        run: |
          echo "🏆 Generating awards predictions..."
          python src/data-processors/awards-tracker.py
          echo "✅ Awards predictions complete"
      
      - name: Track Prediction Accuracy
        run: |
          echo "📊 Analyzing prediction accuracy..."
          python src/analysis/awards_accuracy_tracker.py
          echo "✅ Accuracy analysis complete"
      
      - name: Generate Accuracy Summary
        run: |
          echo "📋 Creating accuracy summary..."
          python -c "
import json
import sys
try:
    with open('docs/awards_accuracy_history.json', 'r') as f:
        data = json.load(f)
    perf = data.get('model_performance', {})
    overall = perf.get('overall_accuracy', 0)
    total = perf.get('total_predictions', 0)
    correct = perf.get('total_correct', 0)
    
    # Create summary file
    with open('docs/accuracy_summary.txt', 'w') as f:
        f.write(f'Model Accuracy: {overall:.1f}% ({correct}/{total} predictions correct)')
    
    print(f'Current model accuracy: {overall:.1f}% ({correct}/{total})')
    
    # Check for issues
    if overall < 40:
        print('⚠️ WARNING: Low accuracy detected')
        with open('docs/accuracy_alert.txt', 'w') as f:
            f.write('ALERT: Model accuracy below 40%')
    
except Exception as e:
    print(f'Error: {e}')
    with open('docs/accuracy_summary.txt', 'w') as f:
        f.write('Model Accuracy: No data available')
          " 
      
      - name: Archive Data with Timestamp
        run: |
          echo "📦 Archiving data..."
          timestamp=$(date +"%Y%m%d_%H%M%S")
          
          # Archive accuracy data
          if [ -f "docs/awards_accuracy_history.json" ]; then
            cp docs/awards_accuracy_history.json archive/awards_accuracy_${timestamp}.json
          fi
          
          # Archive prediction files
          for file in docs/*_predictions.csv; do
            if [ -f "$file" ]; then
              basename=$(basename "$file" .csv)
              cp "$file" "archive/${basename}_${timestamp}.csv"
            fi
          done
          
          echo "📁 Data archived: ${timestamp}"
      
      - name: Commit and Push Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all generated files
          git add docs/ archive/
          
          # Create commit message with accuracy
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
          ACCURACY=""
          if [ -f "docs/accuracy_summary.txt" ]; then
            ACCURACY=$(cat docs/accuracy_summary.txt)
          fi
          
          git commit -m "🤖 Auto-update NFL data - ${TIMESTAMP}

📊 Updates:
- Player statistics and leaderboards
- Team standings and analytics  
- Weekly trends and momentum
- Awards predictions (MVP, OROY, DROY)
- Prediction accuracy tracking

🎯 ${ACCURACY}

Generated by GitHub Actions" || echo "No changes to commit"
          
          git push || echo "Nothing to push"

  # Accuracy-only update job
  accuracy-update:
    runs-on: ubuntu-latest
    if: github.event.inputs.force_accuracy_update == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas matplotlib requests
      
      - name: Update Accuracy Only
        run: |
          echo "🔄 Updating accuracy calculations..."
          python src/analysis/awards_accuracy_tracker.py
          echo "✅ Accuracy update complete"
      
      - name: Commit Accuracy Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git commit -m "🎯 Manual accuracy tracking update - $(date '+%Y-%m-%d %H:%M:%S')" || echo "No changes"
          git push || echo "Nothing to push"